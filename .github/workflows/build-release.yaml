name: Build and Release

on:
  push:
    tags:
      - 'v*' # 当推送标签时触发
  pull_request:
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        target:
          - { os: ubuntu-latest, target: i686-unknown-linux-musl, artifact_name: echo-server }
          - { os: ubuntu-latest, target: x86_64-unknown-linux-musl, artifact_name: echo-server }
          - { os: ubuntu-latest, target: aarch64-unknown-linux-musl, artifact_name: echo-server }
          - { os: windows-latest, target: i686-pc-windows-msvc, artifact_name: echo-server.exe }
          - { os: windows-latest, target: x86_64-pc-windows-msvc, artifact_name: echo-server.exe }
          - { os: windows-latest, target: aarch64-pc-windows-msvc, artifact_name: echo-server.exe }
          - { os: macos-latest, target: x86_64-apple-darwin, artifact_name: echo-server }
          - { os: macos-latest, target: aarch64-apple-darwin, artifact_name: echo-server }

    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target.target }}
          override: true

      - name: install target
        run: rustup target add ${{ inputs.target }}
      - uses: mlugg/setup-zig@v1
        if: matrix.os != 'windows-latest'
      - name: Install cargo-zigbuild
        if: matrix.os != 'windows-latest'
        run: cargo install cargo-zigbuild
      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: cargo build --target ${{ matrix.target.target }} --release
      - name: Build (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: cargo zigbuild --target ${{ matrix.target.target }} --release
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.target }}
          path: target/${{ matrix.target.target }}/release/${{ matrix.target.artifact_name }}


  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}